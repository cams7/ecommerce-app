cd /home/cams7/Dev/Projetos
mkdir ecommerce

#--------------------------------------------------------------------------------------------------

#Ecommerce APP

cd /home/cams7/Dev/Projetos/ecommerce

ng new ecommerce-app --routing

cd /home/cams7/Dev/Projetos/ecommerce/ecommerce-app

npm install ngx-bootstrap bootstrap --save
npm install --save font-awesome angular2-font-awesome
npm install angularjs-color-picker --save
npm install jquery --save

#Change 'ecommerce-app/.angular-cli.json' file
#"styles": ["../node_modules/bootstrap/dist/css/bootstrap.css","../node_modules/font-awesome/css/font-awesome.css","styles.css","../node_modules/angularjs-color-picker/dist/angularjs-color-picker.css"],
#"scripts": ["../node_modules/jquery/dist/jquery.js","../node_modules/bootstrap/dist/js/bootstrap.js"],

npm test
#CTR-C

ng lint -fix

ng e2e

npm start
#Go to http://localhost:4200
#CTR-C

ng build --prod

http-server dist/
#Go to http://localhost:8080
#CTR-C

ng g m home
ng g c home

ng g c about-us

ng g m blog
ng g c blog

ng g m contact
ng g c contact

ng g c page-not-found

ng g s settings

ng g m products
ng g c products
ng g s products/products
ng g class products/product
ng g p products/product-short-description
ng g p products/product-short-name

ng g s products/guards/product-resolver
#Rename product-resolver.service to product.resolver
#Rename product-resolver.service.spec to product.resolver.spec

ng g m reviews
ng g c reviews
ng g s reviews/reviews
ng g class reviews/review

ng g m items
ng g c items
ng g c items/item-details
ng g s items/items
ng g class items/item

ng g m checkout
ng g c checkout
ng g s checkout/checkout

#--------------------------------------------------------------------------------------------------

#Ecommerce API

cd /home/cams7/Dev/Projetos/ecommerce
mkdir ecommerce-api
cd ecommerce-api

lb

#What's the name of your application? (ecommerce-api)
#Which version of LoopBack would you like to use? (Use arrow keys)
# 3.x (current)
#What kind of application do you have in mind? (Use arrow keys)
# api-server (A LoopBack API server with local User auth)

node .
#Go to http://0.0.0.0:3000/explorer
#CTR-C

rm -r  ~/Dev/Projetos/ecommerce/ecommerce-api/client/*
cp -r ~/Dev/Projetos/ecommerce/ecommerce-app/dist/*  ~/Dev/Projetos/ecommerce/ecommerce-api/client

node .
#Go to http://0.0.0.0:3000
#CTR-C

node ./server/migrate.js
#CTR-C

-------------------------------------------------

sudo -i -u postgres
psql -d template1 -U postgres
CREATE USER ecommerce_admin WITH PASSWORD '12345';
CREATE DATABASE ecommerce;
GRANT ALL PRIVILEGES ON DATABASE ecommerce to ecommerce_admin;
\q
exit

lb datasource

Enter the datasource name: ecommerceDS
Select the connector for ecommerceDS: PostgreSQL ...
Connection String url to override other settings (eg: postgres://username:password@localhost/database):
host: 127.0.0.1
port: 5432
user: ecommerce_admin
password:12345
database: ecommerce
Install loopback-connector-postgresql@^2.4 Yes

-------------------------------------------------

mysql -u root -p
CREATE DATABASE ecommerce;
CREATE USER 'store_owner'@'%' IDENTIFIED BY 'store';
GRANT ALL PRIVILEGES ON ecommerce.* TO 'store_owner'@'%';
FLUSH PRIVILEGES;		
exit		
mysql --host=127.0.0.1 --user=store_owner --password=store ecommerce
exit

lb datasource

Enter the datasource name: ecommerceDS
Select the connector for ecommerceDS: MySQL ...
Connection String url to override other settings (eg: mysql://user:pass@host/db):
host: 127.0.0.1
port: 3306
user: store_owner
password: store
database: ecommerce
Install loopback-connector-mysql@^2.2 Yes
loopback-connector-mysql@2.4.1

-------------------------------------------------

lb model

Enter the model name: Customer
Select the datasource to attach Customer to: ecommerceDS ...
Select model's base class PersistedModel
Expose Customer via the REST API? Yes
Common model or server only? common

Enter an empty property name when done.
Property name: name
Property type: string
Required? Yes

Property name: phone
Property type: string
Required? Yes

Property name: createdAt
Property type: date
Required? Yes

Property name: updatedAt
Property type: date
Required? Yes

lb relation

Select the model to create the relationship from: Customer
Relation type: belongs to
Choose a model to create a relationship with: (other)
Enter the model name: User
Enter the property name for the relation: user
Optionally enter a custom foreign key: userId

lb relation

Select the model to create the relationship from: Customer
Relation type: has many
Choose a model to create a relationship with: Order
Enter the property name for the relation: orders
Optionally enter a custom foreign key: customerId
Require a through model? No

lb relation

Select the model to create the relationship from: Customer
Relation type: has many
Choose a model to create a relationship with: ProductReview
Enter the property name for the relation: reviews
Optionally enter a custom foreign key: customerId
Require a through model? No

-------------------------------------------------

lb model

Enter the model name: Order
Select the datasource to attach Order to: ecommerceDS ...
Select model's base class PersistedModel
Expose Order via the REST API? Yes
Common model or server only? common

Property name: quantity
Property type: number
Required? Yes

Property name: subtotal
Property type: number
Required? Yes

Property name: status
Property type: number
Required? Yes

Property name: createdAt
Property type: date
Required? Yes

Property name: updatedAt
Property type: date
Required? Yes

lb relation

Select the model to create the relationship from: Order
Relation type: belongs to
Choose a model to create a relationship with: Customer
Enter the property name for the relation: customer
Optionally enter a custom foreign key: customerId

lb relation

Select the model to create the relationship from: Order
Relation type: has many
Choose a model to create a relationship with: OrderItem
Enter the property name for the relation: items
Optionally enter a custom foreign key: orderId
Require a through model? No

-------------------------------------------------

lb model

Enter the model name: OrderItem
Select the datasource to attach OrderItem to: ecommerceDS ...
Select model's base class PersistedModel
Expose OrderItem via the REST API? Yes
Common model or server only? common

Property name: productCost
Property type: number
Required? Yes

Property name: quantity
Property type: number
Required? Yes

lb relation

Select the model to create the relationship from: OrderItem
Relation type: belongs to
Choose a model to create a relationship with: Order
Enter the property name for the relation: order
Optionally enter a custom foreign key: orderId

lb relation

Select the model to create the relationship from: OrderItem
Relation type: belongs to
Choose a model to create a relationship with: Product
Enter the property name for the relation: product
Optionally enter a custom foreign key: productId

-------------------------------------------------

lb model

Enter the model name: Product
Select the datasource to attach Product to: ecommerceDS ...
Select model's base class PersistedModel
Expose Product via the REST API? Yes
Common model or server only? common

Property name: name
Property type: string
Required? Yes

Property name: pricing
Property type: number
Required? Yes

Property name: description
Property type: string
Required? No

Property name: published
Property type: boolean
Required? Yes

Property name: ratingCache
Property type: number
Required? No

Property name: ratingCount
Property type: number
Required? No

Property name: createdAt
Property type: date
Required? Yes

Property name: updatedAt
Property type: date
Required? Yes

lb relation

Select the model to create the relationship from: Product
Relation type: has many
Choose a model to create a relationship with: OrderItem
Enter the property name for the relation: items
Optionally enter a custom foreign key: productId
Require a through model? No

lb relation

Select the model to create the relationship from: Product
Relation type: has one
Choose a model to create a relationship with: StoredProduct
Enter the property name for the relation: stored
Optionally enter a custom foreign key: productId

lb relation

Select the model to create the relationship from: Product
Relation type: has many
Choose a model to create a relationship with: ProductReview
Enter the property name for the relation: reviews
Optionally enter a custom foreign key: productId
Require a through model? No

lb relation

Select the model to create the relationship from: Product
Relation type: has many
Choose a model to create a relationship with: ProductImage
Enter the property name for the relation: images
Optionally enter a custom foreign key: productId
Require a through model? No

-------------------------------------------------

lb model

Enter the model name: StoredProduct
Select the datasource to attach StoredProduct to: ecommerceDS ...
Select model's base class PersistedModel
Expose StoredProduct via the REST API? Yes
Common model or server only? common

Property name: quantity
Property type: number
Required? Yes

Property name: subtotal
Property type: number
Required? Yes

lb relation

Select the model to create the relationship from: StoredProduct
Relation type: belongs to
Choose a model to create a relationship with: Product
Enter the property name for the relation: product
Optionally enter a custom foreign key: productId

-------------------------------------------------

lb model

Enter the model name: ProductReview
Select the datasource to attach ProductReview to: ecommerceDS ...
Select model's base class PersistedModel
Expose ProductReview via the REST API? Yes
Common model or server only? common

Property name: rating
Property type: number
Required? Yes

Property name: comment
Property type: string
Required? Yes

Property name: approved
Property type: boolean
Required? Yes

Property name: spam
Property type: boolean
Required? Yes

Property name: createdAt
Property type: date
Required? Yes

Property name: updatedAt
Property type: date
Required? Yes

lb relation

Select the model to create the relationship from: ProductReview
Relation type: belongs to
Choose a model to create a relationship with: Product
Enter the property name for the relation: product
Optionally enter a custom foreign key: productId

lb relation

Select the model to create the relationship from: ProductReview
Relation type: belongs to
Choose a model to create a relationship with: Customer
Enter the property name for the relation: customer
Optionally enter a custom foreign key: customerId

-------------------------------------------------

lb model

Enter the model name: ProductImage
Select the datasource to attach ProductImage to: ecommerceDS ...
Select model's base class PersistedModel
Expose ProductImage via the REST API? Yes
Common model or server only? common

Property name: icon
Property type: string
Required? Yes

Property name: size
Property type: number
Required? Yes

lb relation

Select the model to create the relationship from: ProductImage
Relation type: belongs to
Choose a model to create a relationship with: Product
Enter the property name for the relation: product
Optionally enter a custom foreign key: productId

-------------------------------------------------

npm install async -save
	
